#include <iostream>
using namespace std;

// Node structure for single-threaded binary tree
struct Node {
    int data;
    Node* left;
    Node* right;
    bool isThreaded; // Indicates if right pointer is a thread

    Node(int value) : data(value), left(nullptr), right(nullptr), isThreaded(false) {}
};

// Function to insert nodes into the tree
Node* insert(Node* root, int key) {
    if (!root) {
        return new Node(key);
    }

    if (key < root->data) {
        root->left = insert(root->left, key);
    } else if (key > root->data) {
        if (root->isThreaded) {
            Node* temp = new Node(key);
            temp->right = root->right;
            temp->isThreaded = true;
            root->right = temp;
            root->isThreaded = false;
        } else {
            root->right = insert(root->right, key);
        }
    }
    return root;
}

// Function to create threads in the tree
void createThreaded(Node* root, Node*& prev) {
    if (!root) return;

    // Process the left subtree
    createThreaded(root->left, prev);

    // Create a thread from the previous node to the current node
    if (prev && prev->right == nullptr) {
        prev->right = root;
        prev->isThreaded = true;
    }
    prev = root;

    // Process the right subtree if not threaded
    if (!root->isThreaded) {
        createThreaded(root->right, prev);
    }
}

// Reverse in-order traversal of the threaded binary tree
void reverseInorder(Node* root) {
    if (!root) return;

    // Move to the rightmost node
    Node* current = root;
    while (current->right && !current->isThreaded) {
        current = current->right;
    }

    // Traverse the tree in reverse in-order
    while (current) {
        cout << current->data << " ";

        // If left subtree exists, go to the largest node in the left subtree
        if (current->left) {
            current = current->left;
            while (current->right && !current->isThreaded) {
                current = current->right;
            }
        } else {
            // Otherwise, follow the thread to the predecessor
            current = current->right;
        }
    }
}

int main() {
    Node* root = nullptr;

    // Insert nodes into the binary tree
    root = insert(root, 20);
    root = insert(root, 10);
    root = insert(root, 30);
    root = insert(root, 5);
    root = insert(root, 15);
    root = insert(root, 25);
    root = insert(root, 35);

    // Create threads for the binary tree
    Node* prev = nullptr;
    createThreaded(root, prev);

    // Perform reverse in-order traversal
    cout << "Reverse In-order Traversal: ";
    reverseInorder(root);
    cout << endl;

    return 0;
}
