#include <iostream> 
#include <string> 
using namespace std; 
// Base class: BankAccount 
class BankAccount { 
protected: 
int accountNumber;
 string accountHolder;        
          //
 Unique account number 
// Name of the account holder 
double balance;              
public: 
// Constructor 
// Account balance 
BankAccount(int accNum, string holder, double initialBalance) 
: accountNumber(accNum), accountHolder(holder), balance(initialBalance) { 
cout << "BankAccount created for " << accountHolder << " with initial balance 
$" << balance << endl; 
} 
// Method to deposit money into the account 
18 
void deposit(double amount) { 
if (amount > 0) { 
balance += amount; 
cout << "Deposited: $" << amount << ". New balance: $" << balance << 
endl; 
} else { 
cout << "Deposit amount must be positive!" << endl; 
} 
} 
// Method to withdraw money from the account 
void withdraw(double amount) { 
if (amount > balance) { 
cout << "Insufficient funds. Withdrawal of $" << amount << " failed." << 
endl; 
} else if (amount <= 0) { 
cout << "Withdrawal amount must be positive!" << endl; 
} else { 
balance -= amount; 
cout << "Withdrew: $" << amount << ". New balance: $" << balance << 
endl; 
} 
} 
// Method to display account information 
virtual void display() const { 
cout << "Account Number: " << accountNumber << endl; 
cout << "Account Holder: " << accountHolder << endl; 
cout << "Balance: $" << balance << endl; 
} 
// Virtual destructor 
virtual ~BankAccount() { 
cout << "BankAccount for " << accountHolder << " is being closed." << endl; 
} 
}; 
// Base class: InterestBearing 
19 
class InterestBearing { 
protected: 
double interestRate; // Interest rate for the account 
public: 
// Constructor 
InterestBearing(double rate) : interestRate(rate) { 
cout << "InterestBearing account with interest rate " << interestRate << "%" 
<< endl; 
} 
// Method to add interest to balance 
void addInterest(double& balance) const { 
double interest = balance * (interestRate / 100); 
balance += interest; 
cout << "Interest added: $" << interest << ". New balance: $" << balance << 
endl; 
} 
// Virtual destructor 
virtual ~InterestBearing() { 
cout << "InterestBearing destructor called." << endl; 
} 
}; 
// Derived class: SavingsAccount (inherits from BankAccount and InterestBearing) 
class SavingsAccount : public BankAccount, public InterestBearing { 
public: 
// Constructor 
SavingsAccount(int accNum, string holder, double initialBalance, double rate) 
: BankAccount(accNum, holder, initialBalance), InterestBearing(rate) { 
cout << "SavingsAccount created for " << accountHolder << " with interest 
rate " << interestRate << "%" << endl; 
} 
// Method to add interest to the balance 
void applyInterest() { 
addInterest(balance); // Use InterestBearing's addInterest 
20 
} 
// Override display method to show interest rate 
void display() const override { 
BankAccount::display(); // Call display from BankAccount 
cout << "Interest Rate: " << interestRate << "%" << endl; 
} 
// Destructor 
~SavingsAccount() override { 
cout << "SavingsAccount for " << accountHolder << " is being closed." << endl; 
} 
}; 
int main() { 
// Create a SavingsAccount object 
SavingsAccount mySavings(123456, "Alice Johnson", 1000.00, 2.5); 
// Perform transactions 
mySavings.deposit(500); 
mySavings.withdraw(200); 
mySavings.applyInterest(); 
// Display account information 
cout << "\nAccount Details:" << endl; 
mySavings.display(); 
return 0; 
} 