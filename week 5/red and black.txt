#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* parent;
    Node* left;
    Node* right;
    bool color;  // True for Red, False for Black
};

// Class for Red-Black Tree
class RedBlackTree {
private:
    Node* root;
    Node* TNULL;  // Null node reference

    // Create a new node
    Node* createNode(int data) {
        Node* node = new Node;
        node->data = data;
        node->parent = nullptr;
        node->left = TNULL;
        node->right = TNULL;
        node->color = true;  // New nodes are always Red
        return node;
    }

    // Left Rotate
    void leftRotate(Node* x) {
        Node* y = x->right;
        x->right = y->left;
        if (y->left != TNULL)
            y->left->parent = x;

        y->parent = x->parent;
        if (x->parent == nullptr)
            root = y;
        else if (x == x->parent->left)
            x->parent->left = y;
        else
            x->parent->right = y;

        y->left = x;
        x->parent = y;
    }

    // Right Rotate
    void rightRotate(Node* x) {
        Node* y = x->left;
        x->left = y->right;
        if (y->right != TNULL)
            y->right->parent = x;

        y->parent = x->parent;
        if (x->parent == nullptr)
            root = y;
        else if (x == x->parent->right)
            x->parent->right = y;
        else
            x->parent->left = y;

        y->right = x;
        x->parent = y;
    }

    // Fix violations after insertion
    void fixInsert(Node* k) {
        while (k->parent->color == true) {
            if (k->parent == k->parent->parent->left) {
                Node* uncle = k->parent->parent->right;

                // Case 1: Uncle is Red
                if (uncle->color == true) {
                    k->parent->color = false;
                    uncle->color = false;
                    k->parent->parent->color = true;
                    k = k->parent->parent;
                } else {
                    // Case 2: Uncle is Black and k is a right child
                    if (k == k->parent->right) {
                        k = k->parent;
                        leftRotate(k);
                    }

                    // Case 3: Uncle is Black and k is a left child
                    k->parent->color = false;
                    k->parent->parent->color = true;
                    rightRotate(k->parent->parent);
                }
            } else {
                
                Node* uncle = k->parent->parent->left;

                if (uncle->color == true) {
                    k->parent->color = false;
                    uncle->color = false;
                    k->parent->parent->color = true;
                    k = k->parent->parent;
                } else {
                    if (k == k->parent->left) {
                        k = k->parent;
                        rightRotate(k);
                    }

                    k->parent->color = false;
                    k->parent->parent->color = true;
                    leftRotate(k->parent->parent);
                }
            }
            if (k == root) break;
        }
        root->color = false;
    }

public:
    // Constructor
    RedBlackTree() {
        TNULL = new Node;
        TNULL->color = false;
        TNULL->left = TNULL->right = nullptr;
        root = TNULL;
    }

    // Insert a new node
    void insert(int data) {
        Node* node = createNode(data);
        Node* y = nullptr;
        Node* x = root;

        while (x != TNULL) {
            y = x;
            if (node->data < x->data)
                x = x->left;
            else
                x = x->right;
        }

        node->parent = y;
        if (y == nullptr)
            root = node;
        else if (node->data < y->data)
            y->left = node;
        else
            y->right = node;

        if (node->parent == nullptr) {
            node->color = false;
            return;
        }

        if (node->parent->parent == nullptr)
            return;

        fixInsert(node);
    }

    // Print the tree (in-order)
    void inOrder(Node* root) {
        if (root != TNULL) {
            inOrder(root->left);
            cout << root->data << " ";
            inOrder(root->right);
        }
    }

    // Print tree wrapper
    void printTree() {
        cout << "In-order traversal of the Red-Black Tree: ";
        inOrder(root);
        cout << endl;
    }
};

// Main function
int main() {
    RedBlackTree tree;

    tree.insert(20);
    tree.insert(15);
    tree.insert(25);
    tree.insert(10);
    tree.insert(5);
    tree.insert(1);

    tree.printTree();
    return 0;
}
